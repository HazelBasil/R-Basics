##TRUE BASICS

#create a variable for reuse
varname <- value 

#access the objects in the workspace
ls()
#summary of some_variable
summary(some_variable)

#remove a variable
rm()
rm(list = ls()) #remove all the variables in the workspace

#basic arithmetic oepration
#additio +, subtraction -, multiplication *, division /, exponentiation ^, modulo %%, pi pi 
#logical
#  < for less than
#  > for greater than
#  <= for less than or equal to
#  >= for greater than or equal to
#  == for equal to each other
#  != not equal to each other


## BASIC DATA TYPES: logical, numeric, integer, character
is.*()  #check whether *class is right for this variable
as.*()  #coercion, transform to * class 
class()  #show the class of the variable


##VECTOR: sequence of the same class of data element 
#create a vector variable
vector_variable <- c()

#Attach labels to vector elements
names(vector_variable) <- c(label1, label2,...) 

#OR, create a name-vector variable
name_variable <- c(label1, label2,...)
name(vector_variable) <- name_variable

# A_vector and B_vector have already been defined for you
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)


# Take the sum of A_vector and B_vector: total_vector
total_vector <- A_vector + B_vector 

# Print total_vector
total_vector

# Calculate the difference between A_vector and B_vector: diff_vector
diff_vector <- A_vector - B_vector 

# Print diff_vector
diff_vector 

#subsetting
# selection by index
poker_vector[c(1,3)]

# selection by name
poker_vector[c("Monday", "Wednesday")]

# selection by logicals
poker_vector[c(TRUE, FALSE, TRUE, FALSE, FALSE)] 

# Casino winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Poker results of Wednesday: poker_wednesday
poker_wednesday <- poker_vector["Wednesday"]

# Mid-week poker results: poker_midweek by using vector[c(nth of elements)]
poker_midweek <- poker_vector[c(2,3,4)] #or 
poker_midweek <- poker_vector[c(2:4)] #or
poker_midweek <- poker_vector[c("Tuesday", "Wednesday", "Thursday")]

# End-of-week roulette results: roulette_endweek
roulette_endweek <- roulette_vector[c(4,5)]

# Calculate the average poker gains during the midweek: avg_poker_midweek
avg_poker_start <- mean(poker_midweek)

# Select amounts for profitable roulette days: roulette_profits
roulette_profits <- roulette_vector[c(F,F,T,F,T)]

# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)

# Number of profitable roulette days: num_profitable_days (logical sum: only counts for trues)
num_profitable_days <-sum(roulette_vector > 0) 


###MATRIX
##CREATE AND NAME MATRICES
#creating a matrix is recycling 

matrix(1:6, nrow = 2)  #2 rows with six element, thus 3 columns, filled by column by column
matrix(1:6, ncol = 2) #2 columns with six elements, thus three rows, filled by column by column
m <- matrix(1:6, nrow =2, byrow = TRUE) #elements will be filled by row

rbind(m, 7:9) # add a row with elements 7, 8, 9 to the existing matrix m
cbind(m, c(7,8) # add a column with elements 7,8 to the existing matrix m

rowSums()  #total of each row
colSums() #total of each col 

m[ , ] #subsetting the matrix
m[c(1,2), c(3,4)] #subsetting the row 1st and second, and the col 3rd and 4th. 

##  CREATE A FACTOR: CATEGORICAL VARIABLES
str()  #see the structure 
factor() #creating a factor variable
level() #create the name of each element by using level function

#create a factor with the levles (orders) and labels arguments (names), and define whehter or not ordered.
facrtor(variable_name, levels = c("","",""), labels = c("","",""), ordered = TRUE)

##LIST: multi type data structure
variable <- list() 
str <- list()  #show compactly the structure of the list

#subsetting and extending list
list_variable[["name"]]
list_variabble[[""]][2] #the element ""'s second thing.
#or 
list_variable[["only the content of the element
list_variable[c("name1", "name2")] #multiple elements with meta information
list_variable$element_name #only the content of the element
list_variable$new_element_name <- "new_element" #add new element to the list
list_variable$sub_list$new_element_name <- "new_element" #add new element to the embedded list in the list 

##DATAFRAME
data.frame() #manually create the dataframe for datasets
head() #check out the first observation
tail() #check out the last observation
dim() #check out the dimensions (observations and variable counts) of the dataframe
data.frame(, , , , stringsAsFactors =FALSE) #strings are encoded as factors by default, but by adding this argument, it is coded as characters 
names(my_df) <- c("", "", "", ....)  #name each column for variables

#adding column (new variable)
data_frame$new_variable
data_frame[["new_variable"]]
cbind(data_frame, new_variable)

#adding row (new observation) is only possible by rbind AFTER matching the names to the existing dataframe.
rbine(data_frame, new_observation)

#sorting and reordering
sort(data_frame$variable) #ordered ersion of the variable
v <- order(data_frame$variable) #show the rank-order of the variable and save it to V
data_frame[v, ] #re-order the observations (rows) based on the ranks indicated by V
order(data_frame$variable, decreasing = TRUE) #order it in the increasing manner 


